apply plugin: 'com.android.library'
apply plugin: 'jacoco'
apply plugin: 'com.github.dcendents.android-maven'

jacoco {
    toolVersion = "0.7.1.201405082137"
}

android {
    compileSdkVersion COMPILE_SDK_VER
    defaultConfig {
        minSdkVersion MIN_SDK_VER
        targetSdkVersion TARGET_SDK_VER
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    lintOptions {
        abortOnError false
    }

    packagingOptions {
        exclude 'LICENSE.txt'
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation "com.android.support:support-v4:$ANDROID_SUPPORT_VER"
    implementation "com.android.support:appcompat-v7:$ANDROID_SUPPORT_VER" // for the LruCache
    implementation "com.android.support:support-annotations:$ANDROID_SUPPORT_VER"

    testImplementation 'com.squareup.okhttp:mockwebserver:2.1.0'
    testImplementation 'junit:junit:4.12'
    testImplementation "org.mockito:mockito-core:1.9.5"
    testImplementation "org.robolectric:robolectric:3.0-rc2"
}


def coverageSourceDirs = [
        '../library/src/main/java'
]

task jacocoTestReport(type:JacocoReport, dependsOn: "testDebug") {
    group = "Reporting"

    description = "Generate Jacoco coverage reports"

    classDirectories = fileTree(
            dir: '../library/build/intermediates/classes/debug',
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/*$ViewInjector*.*',
                       '**/BuildConfig.*',
                       '**/Manifest*.*']
    )

    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)
    executionData = files('../library/build/jacoco/testDebug.exec')

    reports {
        xml.enabled = true
        html.enabled = true
    }
}

task installArchives(type: Upload) {
    description "Installs the artifacts to the local Maven repository."
    repositories.mavenInstaller {
        configuration = configurations.default
        pom.groupId = 'com.climate.android'
        pom.artifactId = 'mirage'
        pom.version = '1.1.0'
    }
}

// taken from http://stackoverflow.com/questions/11474729/how-to-build-sources-jar-with-gradle
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

// docs fail on @see {@link android.net.Uri#parse(String)} dont know why
task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}
